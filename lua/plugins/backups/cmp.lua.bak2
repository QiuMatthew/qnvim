local cmp_status_ok, cmp = pcall(require, "cmp")
if not cmp_status_ok then
  return
end

local snip_status_ok, luasnip = pcall(require, "luasnip")
if not snip_status_ok then
  return
end

require("luasnip.loaders.from_vscode").lazy_load()

local check_backspace = function()
  local col = vim.fn.col "." - 1
  return col == 0 or vim.fn.getline("."):sub(col, col):match "%s"
end

--local cmp = require 'cmp'
--local luasnip = require 'luasnip'
--luasnip.config.setup {}
cmp.setup ({
    snippet = {
        expand = function (args)
            require("luasnip").lsp_expand(args.body)
        end,
    },
    completion = {
        completeope = "menu, menuone, noinsert"
    },
    mpping = cmp.mapping.preset.insert {
        -- choosing from autocomplete candidates
        --['<Tab>'] = cmp.mapping.select_next_item(),
        --['<S-Tab>'] = cmp.mapping.select_prev_item(),
        --['<CR>'] = cmp.mapping.confirm { select = true },
        ["<C-n>"] = cmp.mapping.select_next_item(),
        ["<C-p>"] = cmp.mapping.select_prev_item(),
        ["<C-y>"] = cmp.mapping.confirm { select = true },

        -- scorll the document window
        ["<C-b>"] = cmp.mapping.scroll_docs(-4),
        ["<C-f>"] = cmp.mapping.scroll_docs(4),

        ["<C-l>"] = cmp.mapping(
            function ()
                if luasnip.expand_or_locally_jumpable() then
                    luasnip.expand_or_jump()
                end
            end,
            { "i", "s" }
        ),
        ["<C-h>"] = cmp.mapping(
            function ()
                if luasnip.locally_jumpable(-1) then
                    luasnip.jump(-1)
                end
            end,
            { "i", "s" }
        ),
    },
    sources = cmp.config.sources({
        { name = "nvim_lsp" },
        { name = "luasnip" },
        { name = "path" }
    }, {
        { name = "buffer" },
    })
})

